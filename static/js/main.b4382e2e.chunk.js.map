{"version":3,"sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/App/App.styled.js","components/App/App.jsx","index.js"],"names":["SectionWrap","SectionTitle","Section","title","children","FormContainer","Form","Label","Button","ValidationMessage","validationSchema","Yup","shape","name","min","max","required","number","phone","ContactsFormFormik","nameInputId","nanoid","phoneInputId","initialValues","onSubmit","values","resetForm","props","id","htmlFor","type","placeholder","component","Component","Contacts","ContactsItem","ContactsDetails","ContactsList","contacts","onDeleteClick","map","size","onClick","Filter","filter","onChange","value","debounceTimeout","Container","App","state","addContact","newContact","some","alert","setState","deleteContact","contactId","contact","getFilterValue","event","target","filteredContacts","normalizeFilter","toLowerCase","includes","savedContacts","localStorage","getItem","parsedSavedContacts","JSON","parse","this","prevProps","prevState","setItem","stringify","filtered","ContactsForm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4382e2e.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\nexport const SectionWrap = styled.section`\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n  text-transform: uppercase;\r\n  margin-bottom: 15px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { SectionWrap, SectionTitle } from 'components/Section/Section.styled';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <SectionWrap>\r\n      <SectionTitle>{title}</SectionTitle>\r\n      {children}\r\n    </SectionWrap>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import { Form } from 'formik';\r\nimport styled from '@emotion/styled/macro';\r\n\r\nexport const FormContainer = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-top: 15px;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  width: 300px;\r\n  padding: 12px 12px;\r\n  margin-top: 15px;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  color: var(--text-color);\r\n  background-color: lightslategray;\r\n  text-transform: uppercase;\r\n  border-radius: 5px;\r\n  border: 1px solid transparent;\r\n  cursor: pointer;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 4px 3px 12px -1px var(--accent-color);\r\n  }\r\n`;\r\n\r\nexport const ValidationMessage = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n`;\r\n","import { Component } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { Formik, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport 'yup-phone';\r\nimport {\r\n  FormContainer,\r\n  Button,\r\n  Label,\r\n  ValidationMessage,\r\n} from 'components/ContactsForm/ContactsForm.styled';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('Required'),\r\n  number: Yup.string().phone('+38', true, 'Valid number type +380*********'),\r\n});\r\n\r\nclass ContactsFormFormik extends Component {\r\n  render() {\r\n    let nameInputId = nanoid(3);\r\n    let phoneInputId = nanoid(3);\r\n\r\n    return (\r\n      <Formik\r\n        initialValues={{ name: '', number: '' }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, { resetForm }) => {\r\n          const { name, number } = values;\r\n          this.props.onSubmit({ id: nanoid(3), name, number });\r\n          resetForm();\r\n        }}\r\n      >\r\n        <FormContainer>\r\n          <Label htmlFor={`id-${nameInputId}`}>Name</Label>\r\n          <Field\r\n            name=\"name\"\r\n            type=\"text\"\r\n            id={`id-${nameInputId}`}\r\n            placeholder=\"Name\"\r\n          />\r\n          <ErrorMessage name=\"name\" component={ValidationMessage} />\r\n\r\n          <Label htmlFor={`id-${phoneInputId}`}>Number</Label>\r\n          <Field\r\n            name=\"number\"\r\n            type=\"tel\"\r\n            id={`id-${phoneInputId}`}\r\n            placeholder=\"+380*********\"\r\n          />\r\n          <ErrorMessage name=\"number\" component={ValidationMessage} />\r\n\r\n          <Button type=\"submit\">Add contact</Button>\r\n        </FormContainer>\r\n      </Formik>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactsFormFormik;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Contacts = styled.ul`\r\n  margin-top: 15px;\r\n`;\r\n\r\nexport const ContactsItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  padding: 10px 12px;\r\n  border: 1px solid var(--main-color);\r\n  border-radius: 5px;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  &:hover {\r\n    background-color: var(--bg-hover-color);\r\n  }\r\n`;\r\n\r\nexport const ContactsDetails = styled.p`\r\n  & > span {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  min-width: 150px;\r\n  padding: 8px 12px;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  color: var(--text-color);\r\n  text-transform: uppercase;\r\n  background-color: lightslategray;\r\n  border-radius: 5px;\r\n  border: 1px solid transparent;\r\n  cursor: pointer;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 4px 3px 12px -1px var(--accent-color);\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FaUser, FaPhoneAlt } from 'react-icons/fa';\r\nimport {\r\n  Contacts,\r\n  ContactsItem,\r\n  ContactsDetails,\r\n  Button,\r\n} from 'components/ContactsList/ContactsList.styled';\r\n\r\nfunction ContactsList({ contacts, onDeleteClick }) {\r\n  return (\r\n    <Contacts>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <ContactsItem key={id}>\r\n            <div>\r\n              <ContactsDetails>\r\n                <FaUser size={14} />\r\n                <span>{name}</span>\r\n              </ContactsDetails>\r\n              <ContactsDetails>\r\n                <FaPhoneAlt size={14} />\r\n                <span>{number}</span>\r\n              </ContactsDetails>\r\n            </div>\r\n            <Button type=\"button\" onClick={() => onDeleteClick(id)}>\r\n              Delete\r\n            </Button>\r\n          </ContactsItem>\r\n        );\r\n      })}\r\n    </Contacts>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n  onDeleteClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\nimport { DebounceInput } from 'react-debounce-input';\r\n\r\nfunction Filter({ filter, onChange }) {\r\n  return (\r\n    <DebounceInput\r\n      id={`id-${nanoid(3)}`}\r\n      type=\"text\"\r\n      name=\"name\"\r\n      value={filter}\r\n      debounceTimeout={700}\r\n      onChange={onChange}\r\n      placeholder=\"Search\"\r\n    />\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 650px;\r\n  padding: 30px 30px 0 30px;\r\n  background-color: var(--text-color);\r\n  border: 1px solid var(--text-color);\r\n  border-radius: 5px;\r\n`;\r\n","import { Component } from 'react';\nimport Section from 'components/Section/Section';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport { Container } from 'components/App/App.styled';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const savedContacts = localStorage.getItem('contacts');\n    const parsedSavedContacts = JSON.parse(savedContacts);\n\n    if (parsedSavedContacts) {\n      this.setState({ contacts: parsedSavedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevContacts = prevState.contacts;\n    const updateContacts = this.state.contacts;\n    if (prevContacts !== updateContacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = newContact => {\n    this.state.contacts.some(({ name }) => name === newContact.name)\n      ? alert(`Contact ${newContact.name} already exists`)\n      : this.setState(({ contacts }) => ({\n          contacts: [newContact, ...contacts],\n        }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  getFilterValue = event => {\n    this.setState({\n      filter: event.target.value,\n    });\n  };\n\n  filteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizeFilter) ||\n        contact.number.includes(normalizeFilter),\n    );\n  };\n\n  render() {\n    const { addContact, deleteContact, getFilterValue, filteredContacts } =\n      this;\n    const filtered = filteredContacts();\n    return (\n      <Container>\n        <Section title=\"Phonebook\">\n          <ContactsForm onSubmit={addContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter filter={this.state.filter} onChange={getFilterValue} />\n          <ContactsList contacts={filtered} onDeleteClick={deleteContact} />\n        </Section>\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from 'components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}